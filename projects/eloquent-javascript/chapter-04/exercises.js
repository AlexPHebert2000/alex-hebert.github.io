////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(initial, terminal, increment = 1 ) {
  //validate arguments, insure increment will move from intial to terminal
  if((initial > terminal && increment > 0) || (initial < terminal && increment < 0) || initial === terminal){return [];}
  //initialize array
  const arr = [];
  //intialize counter
  let counter = initial;
  //while counter is inside the bounds of intial and terminal
  while(counter <= Math.max(initial,terminal) && counter >= Math.min(initial,terminal)){
    //push i to array
    arr.push(counter);
    //increment counter
    counter += increment;
  }
  //return array
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  if(array.length === 0){return 0}
  return array.reduce((acc, cur) => acc + cur)
  /*
  //intialize sum variable
  let sum = 0;
  //itterate over array
  for(let num of array){
    //add num to sum
    sum += num;
  }
  //return sum
  return sum;
  */
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  //intialize new array
  const reversed = [];
  //itterate through array
  for(let element of arr){
    //unshift element to new array
    reversed.unshift(element);
  }
  //return array
  return reversed;
}
console.log(reverseArray([1,2,3]))
////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  return arr.reverse()
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function createNode(value, rest){
  return {
    value: value,
    rest: rest
  }
}

function arrayToList(array) {
  //intitalize current node, original node
  let previousNode = createNode(array[array.length - 1], null)
  //itterate through array backwards
  for(let i = array.length - 2; i >= 0 ; i --){
    //create new node
    var newNode = createNode(array[i], previousNode)
    //set current node to new node
    previousNode = newNode;
  }
  return newNode;
}



////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  //intialize array
  const returnArr = [];
  //intialize node
  let node = list;
  //itterate through list
  while(node.rest){
    //push value to array
    returnArr.push(node.value);
    //navigate to next node
    node = node.rest
  }
  //push final value
  returnArr.push(node.value);
  //return array
  return returnArr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return createNode(value, list)
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list,n) {
  //return listToArray(list)[n]

  //validate index
  if(n < 0){return undefined;}
  //intialize node
  let node = list;
  //itterate to n
  for(let i = 0; i < n; i++){
    //navigate to next node
    node = node.rest;
  }
  //return node value
  return node.value
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  return JSON.stringify(x) === JSON.stringify(y)
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
